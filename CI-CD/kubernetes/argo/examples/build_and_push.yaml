metadata:
  generateName: dotnet-update-refs-template-
spec:
  entrypoint: dotnet-update-refs
  securityContext:
    runAsUser: 0  # 统一使用 root 账号运行容器
  volumes:
    # 将 secrets 中的 ssh key 挂载到容器中使用
    - name: ssh-id-rsa
      secret:
        secretName: private-git-creds
        items:
          - key: "ssh-private-key"
            # ssh key 的文件名
            path: "ssh-private-key"
            mode: 0400
  arguments:
    # 参数化 workflow，如下参数可动态设定
    parameters:
      - name: src-git-url
        value: 'git@gitlab.svc.local:xxx/xxx.git'
      - name: src-branch
        value: dev
  templates:
    - name: dotnet-update-refs
      steps:
        # 更新依赖这一步，使用 exitCode 表示运行结果
        # 0 => 正常地更新了部分依赖的版本号
        # 254 => 更新了部分版本号，但是部分依赖有主版本更新，这个需要手动处理
        # 253 => 所有依赖全都是最新版本
        - - name: update-refs
            template: update-dotnet-references
            continueOn:
              # 即使任务失败，也不中断 workflow。因为我们要使用 exitCode 表示运行结果
              failed: true
        - - name: push-updates-to-git
            template: push-updates-to-git
            arguments:
              artifacts:
                - name: work-src
                  from: '{{steps.update-refs.outputs.artifacts.work-src}}'
            # 有依赖更新时，需要将更新推送回 git 仓库
            when: '{{steps.update-refs.exitCode}} == 0 || {{steps.update-refs.exitCode}} == 254'
          - name: failed
            template: failed
            # 如果 exitCode 不在 0/254/253 这几个正常返回值范围内，说明是未知的问题，任务应该失败
            when: '{{steps.update-refs.exitCode}} != 0 && {{steps.update-refs.exitCode}} != 254 && {{steps.update-refs.exitCode}} != 253'
    - name: update-dotnet-references
      inputs:
        artifacts:
          - name: src
            path: /work/src
            # 从 git 仓库拉取源代码
            git:
              repo: '{{workflow.parameters.src-git-url}}'
              revision: '{{workflow.parameters.src-branch}}'
              # 使用 k8s secret 中保存的 ssh key
              usernameSecret:
                name: private-git-creds
                key: username
              sshPrivateKeySecret:
                name: private-git-creds
                key: ssh-private-key
              # 不验证 ssh 指纹
              insecureIgnoreHostKey: true
      outputs:
        artifacts:
          - name: work-src
            path: /work/src/
      script:
        image: 'harbor.svc.local/ci/dotnet:alpine'
        command:
          - sh
        workingDir: /work/src/
        source: |
          python update_refs.py
    - name: push-updates-to-git
      inputs:
        artifacts:
          - name: work-src
            path: /work/src/
      script:
        image: 'harbor.svc.local/ci/base:alpine'
        # 挂载 ssh key
        volumeMounts:
          - name: ssh-id-rsa
            mountPath: "/tmp/ssh"
            readOnly: true
        command:
          - sh
        env:
          # 让 git 命令使用挂载进来的 ssh key
          - name: GIT_SSH_COMMAND
            value: "ssh -i /tmp/ssh/ssh-private-key"
        workingDir: /work/src/
        source: |
          git add .
          git commit -m "chore: update by ci - update dependencies and upgrade version"
          git push origin HEAD:{{workflow.parameters.src-branch}}
    - name: failed
      script:
        image: 'harbor.svc.local/ci/base:alpine'
        command:
          - sh
        source: |
          echo '任务失败，请检查任务日志'
          exit 1
